
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if a user is an admin
    function isAdmin() {
      // Assumes you have a 'users' collection where user roles are stored.
      // The admin's document in the 'users' collection must have a 'role' field set to 'admin'.
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Products: Allow public read, but only admin write/delete.
    match /products/{productId} {
      allow read: if true;
      allow write, delete: if isAdmin();
    }

    // Users: Users can read/update their own profile. Admins can read any profile.
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId || isAdmin();
      // Allow creation for new sign-ups
      allow create: if isAuthenticated();
    }

    // Orders: Users can read their own orders. Admins can read all orders.
    // Users can create their own orders.
    match /orders/{orderId} {
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.userId || isAdmin());
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      allow update, delete: if isAdmin();
    }
  }
}
